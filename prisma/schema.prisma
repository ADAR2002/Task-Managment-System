// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // Temporarily generate client into node_modules so `@prisma/client` resolves correctly
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}
model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  name      String
  tasks     Task[]
  RefreshToken RefreshToken[]

  Comment Comment[]
} 
model Task {
  id          Int      @id @default(autoincrement())
  title       String
  description String?
  status      TaskStatus   @default(PENDING)
  userId      Int
  user        User     @relation(fields: [userId], references: [id])

  Attachment Attachment[]

  Comment Comment[]
}

enum TaskStatus{
  PENDING
  IN_PROGRESS
  DONE
}

model Attachment {
  id         Int      @id @default(autoincrement())
  filename   String   // original filename
  path       String   // stored path or URL
  mimetype   String?
  size       Int?
  task       Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  taskId     Int
  uploadedAt DateTime @default(now())
}

model RefreshToken{
  id  Int   @id @default(autoincrement())
  token String
  user  User  @relation(fields: [userId],references: [id],onDelete: Cascade)
  userId  Int
  createdAt DateTime @default(now())
  expiresAt DateTime
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User @relation(fields: [userId], references: [id])
  userId Int

  task   Task @relation(fields: [taskId], references: [id])
  taskId Int
}